syntax = "proto3";

package sunrise.swap;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sunrise/swap/params.proto";
import "cosmos/base/v1beta1/coin.proto";

import "sunrise/swap/route.proto";

option go_package = "github.com/sunriselayer/sunrise/x/swap/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc SwapExactAmountIn(MsgSwapExactAmountIn)
      returns (MsgSwapExactAmountInResponse);
  rpc SwapExactAmountOut(MsgSwapExactAmountOut)
      returns (MsgSwapExactAmountOutResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "sunrise/x/swap/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgSwapExactAmountIn {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string interface_provider = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated Route route = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  cosmos.base.v1beta1.Coin amount_in = 4 [ (gogoproto.nullable) = false ];
  string min_amount_out = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountInResponse {
  string amount_out = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountOut {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string interface_provider = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated Route route = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  cosmos.base.v1beta1.Coin amount_out = 4 [ (gogoproto.nullable) = false ];
  string max_amount_in = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgSwapExactAmountOutResponse {
  string amount_in = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}
